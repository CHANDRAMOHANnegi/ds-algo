package hackerrank;

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class MatrixRotation {

	// Complete the matrixRotation function below.
	static void matrixRotation(List<List<Integer>> matrix, int r) {

		for (List<Integer> list : matrix) {
			for (Integer x : list) {
			 
				forSystem.out.println(x);
			}
		}
	}

	public static void main(String[] args) throws IOException {
//		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

//		String[] mnr = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

//		int m = Integer.parseInt(mnr[0]);
//
//		int n = Integer.parseInt(mnr[1]);
//
//		int r = Integer.parseInt(mnr[2]);

		List<List<Integer>> matrix = new ArrayList<>();

//		IntStream.range(0, m).forEach(i -> {
//			try {
//				matrix.add(Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
//						.map(Integer::parseInt).collect(toList()));
//			} catch (IOException ex) {
//				throw new RuntimeException(ex);
//			}
//		});
		
		 List<Integer> row1 = new ArrayList<>();
		 row1.add(1);
		 row1.add(2);
		 row1.add(3);
		 List<Integer> row2 = new ArrayList<>();
		 row2.add(4);
		 row2.add(5);
		 row2.add(6);
		 List<Integer> row3 = new ArrayList<>();
		 row3.add(7);
		 row3.add(8);
		 row3.add(9);

		 matrix.add(row1);
		 matrix.add(row2);
		 matrix.add(row3);
		
		
		matrixRotation(matrix, 3);

//		bufferedReader.close();
	}
}
